name: CMake Qt Cross-Platform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        qt_version: ['6.5.3']
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt_version }}
        host: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'mac' }}
        target: desktop
        modules: 'qtnetworkauth qtmultimedia'
        cache: true

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxcb-xinerama0-dev libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync1 libxcb-render-util0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render0-dev libxcb-util1 fuse libxcb-cursor0 libxcb-cursor-dev
        
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "${{ github.workspace }}"

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

    - name: Package Windows Application with Qt DLLs
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        mkdir deploy
        copy "${{ steps.strings.outputs.build-output-dir }}\Release\CyberChat.exe" deploy\ || copy "${{ steps.strings.outputs.build-output-dir }}\CyberChat.exe" deploy\
        windeployqt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw deploy\CyberChat.exe

    - name: Package macOS Application (Portable)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p deploy
        
        # Find and copy the executable/app bundle
        if [ -f "${{ steps.strings.outputs.build-output-dir }}/CyberChat.app/Contents/MacOS/CyberChat" ]; then
          echo "Found app bundle"
          cp -r "${{ steps.strings.outputs.build-output-dir }}/CyberChat.app" deploy/
          APP_PATH="deploy/CyberChat.app"
        elif [ -f "${{ steps.strings.outputs.build-output-dir }}/CyberChat" ]; then
          echo "Found standalone executable, creating app bundle"
          mkdir -p deploy/CyberChat.app/Contents/MacOS
          cp "${{ steps.strings.outputs.build-output-dir }}/CyberChat" deploy/CyberChat.app/Contents/MacOS/
          APP_PATH="deploy/CyberChat.app"
          
          # Create minimal Info.plist
          cat > deploy/CyberChat.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>CyberChat</string>
            <key>CFBundleIdentifier</key>
            <string>com.cybernilsen.cyberchat</string>
            <key>CFBundleName</key>
            <string>CyberChat</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
        </dict>
        </plist>
        EOF
        else
          echo "CyberChat executable not found"
          ls -la "${{ steps.strings.outputs.build-output-dir }}/"
          exit 1
        fi
        
        # Use macdeployqt to bundle Qt frameworks
        echo "Running macdeployqt..."
        macdeployqt "$APP_PATH" -verbose=2
        
        # Make executable
        chmod +x "$APP_PATH/Contents/MacOS/CyberChat"
    - name: Package Linux Application (AppImage)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p deploy
        
        # Find the executable
        if [ -f "${{ steps.strings.outputs.build-output-dir }}/cyberchat" ]; then
          EXEC_PATH="${{ steps.strings.outputs.build-output-dir }}/cyberchat"
        elif [ -f "${{ steps.strings.outputs.build-output-dir }}/CyberChat" ]; then
          EXEC_PATH="${{ steps.strings.outputs.build-output-dir }}/CyberChat"
        elif [ -f "${{ steps.strings.outputs.build-output-dir }}/Release/CyberChat" ]; then
          EXEC_PATH="${{ steps.strings.outputs.build-output-dir }}/Release/CyberChat"
        else
          echo "CyberChat executable not found"
          ls -la "${{ steps.strings.outputs.build-output-dir }}/"
          exit 1
        fi
        
        # Create AppDir structure
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/lib
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        # Copy executable
        cp "$EXEC_PATH" AppDir/usr/bin/CyberChat
        chmod +x AppDir/usr/bin/CyberChat
        
        # Create desktop file
        cat > AppDir/usr/share/applications/cyberchat.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=CyberChat
        Exec=CyberChat
        Icon=cyberchat
        Categories=Network;Chat;
        Comment=Secure Anonymous Chat Application
        Terminal=false
        EOF
        
        # Create a simple icon placeholder
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        touch AppDir/usr/share/icons/hicolor/256x256/apps/cyberchat.png
        
        # Copy icon to AppDir root (required by AppImage)
        cp AppDir/usr/share/icons/hicolor/256x256/apps/cyberchat.png AppDir/cyberchat.png
        cp AppDir/usr/share/applications/cyberchat.desktop AppDir/cyberchat.desktop
        
        # Download and use linuxdeploy for dependency bundling
        wget -c "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -c "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        chmod +x linuxdeploy*.AppImage
        
        # Set up environment for Qt plugin
        export QMAKE=$Qt6_DIR/bin/qmake
        export LD_LIBRARY_PATH=$Qt6_DIR/lib:$LD_LIBRARY_PATH
        
        # Try to bundle Qt dependencies and create AppImage with error handling
        if ! ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage; then
          echo "linuxdeploy failed, trying alternative approach..."
          
          # Alternative: manual Qt deployment
          mkdir -p AppDir/usr/lib
          
          # Copy Qt libraries manually
          cp -r $Qt6_DIR/lib/libQt6*.so* AppDir/usr/lib/ 2>/dev/null || true
          cp -r $Qt6_DIR/plugins AppDir/usr/ 2>/dev/null || true
          
          # Create simple AppImage manually
          wget -c "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage AppDir CyberChat-Linux-x86_64.AppImage
        fi
        
        # Debug: List all files to see what was created
        echo "Listing current directory contents:"
        ls -la
        echo "Looking for AppImage files:"
        find . -name "*.AppImage" -type f
        
        # Move the created AppImage to deploy folder with better detection
        APPIMAGE_FILE=""
        if [ -f "CyberChat-x86_64.AppImage" ]; then
          APPIMAGE_FILE="CyberChat-x86_64.AppImage"
        elif [ -f "CyberChat-Linux-x86_64.AppImage" ]; then
          APPIMAGE_FILE="CyberChat-Linux-x86_64.AppImage"
        else
          # Find any AppImage file that was created
          APPIMAGE_FILE=$(find . -maxdepth 1 -name "*.AppImage" -type f | head -1)
        fi
        
        if [ -n "$APPIMAGE_FILE" ] && [ -f "$APPIMAGE_FILE" ]; then
          echo "Found AppImage: $APPIMAGE_FILE"
          mv "$APPIMAGE_FILE" deploy/CyberChat-Linux-x86_64.AppImage
          chmod +x deploy/CyberChat-Linux-x86_64.AppImage
          echo "Successfully moved AppImage to deploy folder"
        else
          echo "ERROR: No AppImage file found!"
          echo "Directory contents:"
          ls -la
          exit 1
        fi

    - name: Test (if tests exist)
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        if [ -f "CTestTestfile.cmake" ]; then
          ctest --build-config ${{ matrix.build_type }} --output-on-failure
        else
          echo "No tests found, skipping test step"
        fi

    - name: Upload Windows Artifacts
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: CyberChat-Windows-Portable
        path: deploy/

    - name: Upload macOS Artifacts
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: CyberChat-macOS-Portable
        path: deploy/

    - name: Upload Linux Artifacts
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: CyberChat-Linux-AppImage
        path: deploy/
